package com.meetingRoom.controller;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.meetingRoom.message.RoomMessage;
import com.meetingRoom.model.Facility;
import com.meetingRoom.model.FacilityName;
import com.meetingRoom.model.Role;
import com.meetingRoom.model.RoleName;
import com.meetingRoom.model.Room;
import com.meetingRoom.model.RoomName;
import com.meetingRoom.model.User;
import com.meetingRoom.repository.FacilityRepository;
import com.meetingRoom.repository.RoomRepository;
import com.meetingRoom.repository.UserRepository;
import com.meetingRoom.service.RoomServiceImpl;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
public class AdminController {

	@Autowired
	private UserRepository repository;
	
	@Autowired
	private RoomServiceImpl roomService;
	
	@Autowired
	private FacilityRepository facilityRepo;

	@GetMapping("/api/admin/getAllUsers")
	@PreAuthorize("hasRole('ADMIN')")
	public List<User> adminAccess() {
		return repository.findAll();
	}

	@GetMapping("/api/admin/findUser/{email}")
	@PreAuthorize("hasRole('ADMIN')")
	public Optional<User> findUser(@PathVariable String email) {
		return repository.findByEmail(email);
	}

	@DeleteMapping("/api/admin/cancel/{id}")
	@PreAuthorize("hasRole('ADMIN')")
    public List<User> cancelRegistration(@PathVariable Long id) {
        repository.deleteById(id);
        return repository.findAll();
    }
		 
    @GetMapping("/api/admin/room/all")
    public List<Room> getRoom() {
        return roomService.getRoom();
    }
 
    @GetMapping("/room/{id}")
    public Room getRoomById(@PathVariable Long id) throws Exception {
    	Optional<Room> room = roomService.getRoomById(id);
    	if(!room.isPresent())
    		throw new Exception("Could not find employee with id" + id);
    	
    	return room.get();
    }
    
    @PostMapping("/room/add")
    public Room createRoom(@RequestBody RoomMessage roomMessage) {
    	Room room = new Room(roomMessage.getLocation());
    	String roomName = roomMessage.getName();

    	List<String> strroom = roomMessage.getFacility();
    	List<Facility> facilities = new ArrayList<>();
    	
    	strroom.forEach(room -> {
			switch (room) {
			case "Projector":
				Facility Pen = facilityRepo.findByName(FacilityName.Pen)
						.orElseThrow(() -> new RuntimeException("Fail! -> Cause: Pen Facility not find."));
				facilities.add(Pen);

				break;
			case "pm":
				Facility Router = facilityRepo.findByName(FacilityName.Router)
						.orElseThrow(() -> new RuntimeException("Fail! -> Cause: pm Role not find."));
				facilities.add(Router);

				break;
			case "Projector":
				Facility Projector = facilityRepo.findByName(FacilityName.Projector)
						.orElseThrow(() -> new RuntimeException("Fail! -> Cause: tl Role not find."));
				facilities.add(Projector);

				break;
			default:
				Facility Chair = facilityRepo.findByName(FacilityName.Chair)
						.orElseThrow(() -> new RuntimeException("Fail! -> Cause: User Role not find."));
				facilities.add(Chair);
			}
		});

		return room;
    	
    }
	
	


	
}
